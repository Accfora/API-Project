// <auto-generated />
using System;
using DataAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(LContext))]
    partial class LContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Property<int>("CategotyId")
                        .HasColumnType("int")
                        .HasColumnName("categoty_id");

                    b.Property<string>("CategotyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("categoty_name");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("ParentCategory")
                        .HasColumnType("int")
                        .HasColumnName("parent_category");

                    b.HasKey("CategotyId")
                        .HasName("PK__Kategori__EB93B733B73DB27B");

                    b.HasIndex("ParentCategory");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("City")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("city");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("surname");

                    b.Property<string>("TelephoneNumber")
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("telephone_number");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Models.Filter", b =>
                {
                    b.Property<int>("FilterId")
                        .HasColumnType("int")
                        .HasColumnName("filter_id");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int")
                        .HasColumnName("category_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.HasKey("FilterId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Filters");
                });

            modelBuilder.Entity("Domain.Models.Good", b =>
                {
                    b.Property<int>("GoodId")
                        .HasColumnType("int")
                        .HasColumnName("good_id");

                    b.Property<int>("AmountOnStock")
                        .HasColumnType("int")
                        .HasColumnName("amount_on_stock");

                    b.Property<int>("CategotyId")
                        .HasColumnType("int")
                        .HasColumnName("categoty_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_id");

                    b.Property<byte[]>("Photo")
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("photo");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(7,2)")
                        .HasColumnName("price");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("title");

                    b.HasKey("GoodId");

                    b.HasIndex("CategotyId");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Goods");
                });

            modelBuilder.Entity("Domain.Models.GoodFilterValue", b =>
                {
                    b.Property<int>("GoodId")
                        .HasColumnType("int")
                        .HasColumnName("good_id");

                    b.Property<int>("FilterId")
                        .HasColumnType("int")
                        .HasColumnName("filter_id");

                    b.Property<object>("FilterValue")
                        .HasColumnType("sql_variant")
                        .HasColumnName("filter_value");

                    b.HasKey("GoodId", "FilterId");

                    b.HasIndex("FilterId");

                    b.ToTable("GoodFilterValue", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Manufacturer", b =>
                {
                    b.Property<int>("ManufacturerId")
                        .HasColumnType("int")
                        .HasColumnName("manufacturer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<string>("ManufacturerCountry")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("manufacturer_country");

                    b.Property<string>("ManufacturerName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("manufacturer_name");

                    b.HasKey("ManufacturerId");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("deleted_at");

                    b.Property<int?>("DeliveryType")
                        .HasColumnType("int")
                        .HasColumnName("delivery_type");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("date")
                        .HasColumnName("order_date");

                    b.Property<bool>("Paid")
                        .HasColumnType("bit")
                        .HasColumnName("paid");

                    b.HasKey("OrderId", "CustomerId")
                        .HasName("PK__Zakazy__4D78AF94D1A3AFA6");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Domain.Models.OrderContent", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("int")
                        .HasColumnName("order_id");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("GoodId")
                        .HasColumnType("int")
                        .HasColumnName("good_id");

                    b.Property<int>("NumberOfPositions")
                        .HasColumnType("int")
                        .HasColumnName("number_of_positions");

                    b.HasKey("OrderId", "CustomerId", "GoodId")
                        .HasName("PK__Soderzhi__810D8EBF7A7B6560");

                    b.HasIndex("GoodId");

                    b.ToTable("Order_content", (string)null);
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.HasOne("Domain.Models.Category", "ParentCategoryNavigation")
                        .WithMany("InverseParentCategoryNavigation")
                        .HasForeignKey("ParentCategory")
                        .HasConstraintName("FK_Categories_Categories");

                    b.Navigation("ParentCategoryNavigation");
                });

            modelBuilder.Entity("Domain.Models.Filter", b =>
                {
                    b.HasOne("Domain.Models.Category", "Category")
                        .WithMany("Filters")
                        .HasForeignKey("CategoryId")
                        .IsRequired()
                        .HasConstraintName("FK_Filters_Categories");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Domain.Models.Good", b =>
                {
                    b.HasOne("Domain.Models.Category", "Categoty")
                        .WithMany("Goods")
                        .HasForeignKey("CategotyId")
                        .IsRequired()
                        .HasConstraintName("FK__Tovary__id_kateg__3F466844");

                    b.HasOne("Domain.Models.Manufacturer", "Manufacturer")
                        .WithMany("Goods")
                        .HasForeignKey("ManufacturerId")
                        .IsRequired()
                        .HasConstraintName("FK__Tovary__id_proiz__403A8C7D");

                    b.Navigation("Categoty");

                    b.Navigation("Manufacturer");
                });

            modelBuilder.Entity("Domain.Models.GoodFilterValue", b =>
                {
                    b.HasOne("Domain.Models.Filter", "Filter")
                        .WithMany("GoodFilterValues")
                        .HasForeignKey("FilterId")
                        .IsRequired()
                        .HasConstraintName("FK_GoodFilterValue_Filters");

                    b.HasOne("Domain.Models.Good", "Good")
                        .WithMany("GoodFilterValues")
                        .HasForeignKey("GoodId")
                        .IsRequired()
                        .HasConstraintName("FK_GoodFilterValue_Goods");

                    b.Navigation("Filter");

                    b.Navigation("Good");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.HasOne("Domain.Models.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Zakazy__id_pokup__30F848ED");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Domain.Models.OrderContent", b =>
                {
                    b.HasOne("Domain.Models.Good", "Good")
                        .WithMany("OrderContents")
                        .HasForeignKey("GoodId")
                        .IsRequired()
                        .HasConstraintName("FK__Soderzhim__id_to__31EC6D26");

                    b.HasOne("Domain.Models.Order", "Order")
                        .WithMany("OrderContents")
                        .HasForeignKey("OrderId", "CustomerId")
                        .IsRequired()
                        .HasConstraintName("FK__Soderzhimoe_zaka__32E0915F");

                    b.Navigation("Good");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Domain.Models.Category", b =>
                {
                    b.Navigation("Filters");

                    b.Navigation("Goods");

                    b.Navigation("InverseParentCategoryNavigation");
                });

            modelBuilder.Entity("Domain.Models.Customer", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Domain.Models.Filter", b =>
                {
                    b.Navigation("GoodFilterValues");
                });

            modelBuilder.Entity("Domain.Models.Good", b =>
                {
                    b.Navigation("GoodFilterValues");

                    b.Navigation("OrderContents");
                });

            modelBuilder.Entity("Domain.Models.Manufacturer", b =>
                {
                    b.Navigation("Goods");
                });

            modelBuilder.Entity("Domain.Models.Order", b =>
                {
                    b.Navigation("OrderContents");
                });
#pragma warning restore 612, 618
        }
    }
}
